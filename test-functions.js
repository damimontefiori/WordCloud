import { apiService } from '../src/services/api.js'

// Script de testing para Firebase Functions
async function testFunctions() {
  console.log('üß™ Iniciando testing de Firebase Functions...\n')

  try {
    // Test 1: Crear sala
    console.log('1Ô∏è‚É£ Testing createRoom...')
    const roomData = {
      title: 'Sala de Prueba',
      description: 'Testing autom√°tico de Firebase Functions',
      maxParticipants: 10,
      timeLimit: 15,
      adminEmail: 'test@example.com'
    }
    
    const createResult = await apiService.createRoom(roomData)
    console.log('‚úÖ Sala creada:', createResult)
    const roomId = createResult.roomId
    const roomCode = createResult.code
    
    // Test 2: Unirse a sala
    console.log('\n2Ô∏è‚É£ Testing joinRoom...')
    const joinData = {
      roomCode: roomCode,
      participantName: 'Participante Test'
    }
    
    const joinResult = await apiService.joinRoom(joinData)
    console.log('‚úÖ Unido a sala:', joinResult)
    const participantId = joinResult.participantId
    
    // Test 3: Enviar palabra
    console.log('\n3Ô∏è‚É£ Testing submitWord...')
    const wordData = {
      roomId: roomId,
      participantId: participantId,
      word: 'Innovaci√≥n'
    }
    
    const wordResult = await apiService.submitWord(wordData)
    console.log('‚úÖ Palabra enviada:', wordResult)
    
    // Test 4: Enviar otra palabra del mismo participante (deber√≠a fallar)
    console.log('\n4Ô∏è‚É£ Testing duplicate word submission...')
    try {
      await apiService.submitWord({
        roomId: roomId,
        participantId: participantId,
        word: 'Duplicada'
      })
      console.log('‚ùå ERROR: Deber√≠a haber fallado')
    } catch (error) {
      console.log('‚úÖ Correctamente bloqueado:', error.message)
    }
    
    console.log('\nüéâ ¬°Todos los tests pasaron exitosamente!')
    console.log(`üìã Resumen:`)
    console.log(`   - Sala ID: ${roomId}`)
    console.log(`   - C√≥digo de sala: ${roomCode}`)
    console.log(`   - Participante ID: ${participantId}`)
    
  } catch (error) {
    console.error('‚ùå Error en testing:', error)
  }
}

// Ejecutar tests si se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testFunctions()
}

export { testFunctions }
