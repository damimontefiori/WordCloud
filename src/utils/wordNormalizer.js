/**
 * Utilidades para normalizaci√≥n de palabras
 * Evita duplicados tratando palabras equivalentes como una √∫nica entrada
 */

/**
 * Mapa de caracteres con acentos a caracteres sin acentos
 */
const ACCENT_MAP = {
  '√°': 'a', '√†': 'a', '√§': 'a', '√¢': 'a', 'ƒÅ': 'a', '√£': 'a', '√•': 'a', 'ƒÖ': 'a',
  '√©': 'e', '√®': 'e', '√´': 'e', '√™': 'e', 'ƒì': 'e', 'ƒó': 'e', 'ƒô': 'e',
  '√≠': 'i', '√¨': 'i', '√Ø': 'i', '√Æ': 'i', 'ƒ´': 'i', 'ƒØ': 'i',
  '√≥': 'o', '√≤': 'o', '√∂': 'o', '√¥': 'o', '≈ç': 'o', '√µ': 'o', '√∏': 'o', '≈ë': 'o',
  '√∫': 'u', '√π': 'u', '√º': 'u', '√ª': 'u', '≈´': 'u', '≈Ø': 'u', '≈±': 'u', '≈≥': 'u',
  // √± se preserva intencionalmente
  '≈Ñ': 'n', '≈à': 'n', '≈Ü': 'n',
  '√ß': 'c', 'ƒá': 'c', 'ƒç': 'c', 'ƒâ': 'c', 'ƒã': 'c',
  '≈ô': 'r', '≈ï': 'r',
  '≈°': 's', '≈õ': 's', '≈ù': 's', '≈ü': 's',
  '≈•': 't', '≈£': 't',
  '√Ω': 'y', '√ø': 'y',
  '≈æ': 'z', '≈∫': 'z', '≈º': 'z',
  'ƒè': 'd', 'ƒë': 'd',
  'ƒü': 'g', 'ƒù': 'g', 'ƒ°': 'g', 'ƒ£': 'g',
  'ƒ•': 'h', 'ƒß': 'h',
  'ƒµ': 'j',
  'ƒ∑': 'k', 'ƒ∏': 'k',
  'ƒ∫': 'l', 'ƒº': 'l', 'ƒæ': 'l', '≈Ä': 'l', '≈Ç': 'l',
  '≈µ': 'w',
  // May√∫sculas
  '√Å': 'A', '√Ä': 'A', '√Ñ': 'A', '√Ç': 'A', 'ƒÄ': 'A', '√É': 'A', '√Ö': 'A', 'ƒÑ': 'A',
  '√â': 'E', '√à': 'E', '√ã': 'E', '√ä': 'E', 'ƒí': 'E', 'ƒñ': 'E', 'ƒò': 'E',
  '√ç': 'I', '√å': 'I', '√è': 'I', '√é': 'I', 'ƒ™': 'I', 'ƒÆ': 'I',
  '√ì': 'O', '√í': 'O', '√ñ': 'O', '√î': 'O', '≈å': 'O', '√ï': 'O', '√ò': 'O', '≈ê': 'O',
  '√ö': 'U', '√ô': 'U', '√ú': 'U', '√õ': 'U', '≈™': 'U', '≈Æ': 'U', '≈∞': 'U', '≈≤': 'U',
  // √ë se preserva intencionalmente
  '≈É': 'N', '≈á': 'N', '≈Ö': 'N',
  '√á': 'C', 'ƒÜ': 'C', 'ƒå': 'C', 'ƒà': 'C', 'ƒä': 'C',
  '≈ò': 'R', '≈î': 'R',
  '≈†': 'S', '≈ö': 'S', '≈ú': 'S', '≈û': 'S',
  '≈§': 'T', '≈¢': 'T',
  '√ù': 'Y', '≈∏': 'Y',
  '≈Ω': 'Z', '≈π': 'Z', '≈ª': 'Z',
  'ƒé': 'D', 'ƒê': 'D',
  'ƒû': 'G', 'ƒú': 'G', 'ƒ†': 'G', 'ƒ¢': 'G',
  'ƒ§': 'H', 'ƒ¶': 'H',
  'ƒ¥': 'J',
  'ƒ∂': 'K', 'ƒ∏': 'K',
  'ƒπ': 'L', 'ƒª': 'L', 'ƒΩ': 'L', 'ƒø': 'L', '≈Å': 'L',
  '≈¥': 'W'
};

/**
 * Elimina acentos y diacr√≠ticos de una cadena
 * @param {string} text - Texto a normalizar
 * @returns {string} Texto sin acentos
 */
function removeAccents(text) {
  return text.split('').map(char => ACCENT_MAP[char] || char).join('');
}

/**
 * Normaliza una palabra aplicando todas las reglas de normalizaci√≥n
 * @param {string} word - Palabra a normalizar
 * @returns {string} Palabra normalizada
 */
export function normalizeWord(word) {
  if (!word || typeof word !== 'string') {
    return '';
  }

  let normalized = word;

  // 1. Trimming: eliminar espacios al inicio y final
  normalized = normalized.trim();

  // 2. Reducir espacios m√∫ltiples a uno solo
  normalized = normalized.replace(/\s+/g, ' ');

  // 3. Convertir a min√∫sculas
  normalized = normalized.toLowerCase();

  // 4. Eliminar acentos y diacr√≠ticos
  normalized = removeAccents(normalized);

  // 5. Remover caracteres especiales no permitidos
  // Permitimos solo letras, n√∫meros, espacios y algunos caracteres b√°sicos
  normalized = normalized.replace(/[^\w\s\-]/g, '');

  // 6. Eliminar espacios invisibles y caracteres de control
  normalized = normalized.replace(/[\u200B-\u200D\uFEFF]/g, '');

  // 7. Trim final despu√©s de todas las transformaciones
  normalized = normalized.trim();

  return normalized;
}

/**
 * Valida si una palabra normalizada es v√°lida
 * @param {string} normalizedWord - Palabra ya normalizada
 * @returns {boolean} True si la palabra es v√°lida
 */
export function isValidWord(normalizedWord) {
  // Debe tener al menos 1 car√°cter
  if (!normalizedWord || normalizedWord.length === 0) {
    return false;
  }

  // No debe ser solo espacios o guiones
  if (/^[\s\-]+$/.test(normalizedWord)) {
    return false;
  }

  // Debe tener al menos una letra
  if (!/[a-zA-Z]/.test(normalizedWord)) {
    return false;
  }

  // Longitud m√°xima razonable (50 caracteres)
  if (normalizedWord.length > 50) {
    return false;
  }

  return true;
}

/**
 * Procesa y normaliza una palabra completa con validaci√≥n
 * @param {string} word - Palabra original
 * @returns {object} Objeto con la palabra normalizada y su validez
 */
export function processWord(word) {
  const normalized = normalizeWord(word);
  const isValid = isValidWord(normalized);
  
  return {
    original: word,
    normalized,
    isValid,
    isEmpty: normalized === ''
  };
}

/**
 * Ejemplos de normalizaci√≥n para testing
 */
export const NORMALIZATION_EXAMPLES = [
  { input: ' Canci√≥n ', expected: 'canci√≥n' }, // √± se preserva
  { input: 'CANCION', expected: 'cancion' },
  { input: 'cancion', expected: 'cancion' },
  { input: 'Ni√±o', expected: 'ni√±o' }, // √± se preserva
  { input: '  m√∫ltiples   espacios  ', expected: 'multiples espacios' },
  { input: 'Ni√±oüéµ', expected: 'ni√±o' },
  { input: 'caf√©-bar', expected: 'cafe-bar' },
  { input: 'S√£o Paulo', expected: 'sao paulo' },
  { input: '  @#$%^  ', expected: '' },
  { input: 'resum√©', expected: 'resume' },
  { input: 'na√Øve', expected: 'naive' },
  { input: 'espa√±ol', expected: 'espa√±ol' } // √± se preserva
];
